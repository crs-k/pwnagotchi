name: Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:

    - name: Validate tag
      id: validate
      run: |
            TAG=${{ github.event.inputs.version }}
            if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Tag $TAG is valid."
            echo "::set-output name=tag::$TAG"
            else
            echo "Tag $TAG is not a valid semantic version. Aborting."
            exit 1
            fi

    - name: Create tag
      uses: actions/github-script@v7
      with:
        script: |
          const version = "${{ steps.validate.outputs.tag }}"
          console.log(`Creating tag ${version}`)
          await github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `refs/tags/${version}`,
            sha: context.sha
          })

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set _version.py via release tag
      run: |
        find . -name '_version.py'
        sed -i "s#.*__version__.*#__version__='${{ steps.validate.outputs.tag }}'#" ./pwnagotchi/_version.py
        echo "Contents of _version.py after modification:"
        cat ./pwnagotchi/_version.py

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.9
    
    # - name: Install dependencies
    #   run: | 
    #        sudo apt-get update && sudo apt-get install -y libdbus-1-dev curl unzip gettext qemu-utils 
    #        pip install -r requirements.txt

    # - name: Install QEMU
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y qemu qemu-user-static binfmt-support
    #     sudo update-binfmts --enable qemu-arm
    #     sudo update-binfmts --enable qemu-aarch64

    # - name: Restart binfmt-support
    #   run: sudo service binfmt-support restart

    # - name: Mount binfmt_misc
    #   run: |
    #     if ! grep -qs '/proc/sys/fs/binfmt_misc ' /proc/mounts; then
    #       sudo mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc
    #     fi

    # - name: Restart binfmt-support
    #   run: sudo service binfmt-support restart
        
    # - name: Update Languages
    #   run: make update_langs
    
    # - name: Compile Languages
    #   run: make compile_langs

    # - name: Run Makefile
    #   run: make

    - name: Create Release
      id: create_release
      uses: actions/github-script@v7
      with:
        script: |
          const tag = "${{ steps.validate.outputs.tag }}"
          console.log(`Creating release with tag: ${tag}`)
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tag,
            name: tag,
            draft: false,
            prerelease: true
          })
          console.log(`Created release with id: ${release.data.id}`)
          return release.data.id


    - name: Compress .img files
      run: |
         find /home/runner/work/ -type f -name "*.img" -exec xz --no-warn {} \;

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/github-script@v7
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const release_id = "${{ steps.create_release.outputs.result }}";
          const asset_content_type = 'application/octet-stream';
          const distDir = '/home/runner/work/pwnagotchi/';
          
          const uploadFile = async (filePath) => {
            if (fs.lstatSync(filePath).isDirectory()) {
              const files = fs.readdirSync(filePath);
              for (const file of files) {
                await uploadFile(path.join(filePath, file));
              }
            } else {
              // Check if the file has a .xz extension
              if (path.extname(filePath) === '.xz') {
                console.log(`Uploading ${filePath}...`);
      
                const asset_name = path.basename(filePath);
                const asset_size = fs.statSync(filePath).size;
                const asset = fs.createReadStream(filePath);
      
                const response = await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: asset_name,
                  data: asset,
                  headers: {
                    'content-type': asset_content_type,
                    'content-length': asset_size
                  }
                });
      
                console.log(`Uploaded ${filePath}: ${response.data.browser_download_url}`);
              }
            }
          }
      
          await uploadFile(distDir);
          
          - name: Update Release
          uses: actions/github-script@v7
          with:
            script: |
              const release_id = "${{ steps.create_release.outputs.result }}"
              console.log(`Updating release with id: ${release_id}`)
        
              // Generate release notes
              const releaseNotes = await github.rest.repos.generateReleaseNotesContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: "${{ steps.validate.outputs.tag }}"
              }, {
                headers: {
                  accept: "application/vnd.github.v3+json"
                }
              })
        
              // Update the release
              github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id,
                tag_name: "${{ steps.validate.outputs.tag }}",
                name: "${{ steps.validate.outputs.tag }}",
                body: releaseNotes.data.body,
                draft: false,
                prerelease: false
              })
