name: Publish
# ${GITHUB_REF#refs/tags/}
on:
    workflow_dispatch:
    release:
      types: [prereleased]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Validate tag
      id: validate
      run: |
            TAG=v0.6.0
            if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Tag $TAG is valid."
            echo "::set-output name=tag::$TAG"
            else
            echo "Tag $TAG is not a valid semantic version. Aborting."
            exit 1
            fi
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install system dependencies
      run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev

    - name: Install dependencies
      run: |
        sudo apt-get install -y curl unzip
        pip install -r requirements.txt
    - name: Set _version.py correctly using the env variable
      run: sed -i "s#.*__version__.*#__version__='$PWN_VERSION'#" pwnagotchi/_version.py
      env: 
        PWN_VERSION: ${{ steps.validate.outputs.tag }}

    - name: Install language dependencies
      run:  sudo apt-get update && sudo apt-get install -y gettext && sudo apt-get install qemu-utils 
    
    - name: Install QEMU
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu qemu-user-static binfmt-support
        sudo update-binfmts --enable qemu-arm
        sudo update-binfmts --enable qemu-aarch64

    - name: Restart binfmt-support
      run: sudo service binfmt-support restart

    - name: Mount binfmt_misc
      run: |
        if ! grep -qs '/proc/sys/fs/binfmt_misc ' /proc/mounts; then
          sudo mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc
        fi

    - name: Restart binfmt-support
      run: sudo service binfmt-support restart
      
    - name: Echo contents of qemu-arm and qemu-aarch64
      run: |
        cat /proc/sys/fs/binfmt_misc/qemu-arm
        cat /proc/sys/fs/binfmt_misc/qemu-aarch64

    - name: Update Languages
      run: make update_langs
    
    - name: Compile Languages
      run: make compile_langs

    # - name: Run Makefile
    #   run: make

    # - name: Zip the image
    #   run: zip -r pwnagotchi-${{ steps.validate.outputs.tag }}.zip pwnagotchi


    - name: Get Release
      id: get_release
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo
          const tag = "${{ steps.validate.outputs.tag }}"
          const releases = await github.rest.repos.listReleases({ owner, repo })
          const release = releases.data.find(r => r.tag_name === tag && r.prerelease === true)
          if (!release) {
            throw new Error(`No pre-release found for tag ${tag}`)
          }
          return { upload_url: release.upload_url, id: release.id }

    - name: Update Release
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo
          const release_id = ${{ steps.get_release.outputs.result.id }}
          const tag = "${{ steps.validate.outputs.tag }}"
          await github.rest.repos.updateRelease({ owner, repo, release_id, tag_name: tag, name: tag, draft: false, prerelease: false })

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.result.upload_url }}
        asset_path: ./pwnagotchi-${{ steps.validate.outputs.tag }}.zip
        asset_name: pwnagotchi-${{ steps.validate.outputs.tag }}.zip
        asset_content_type: application/zip