name: ci-url
on:
  workflow_run:
    workflows: ["Publish"]
    types:
      - completed
jobs:
  ci:
    name: ci-url
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' 

      - name: Download artifact
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const artifact = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            const artifactData = artifact.data.artifacts[0]; // assuming the artifact you want is the first one
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifactData.id,
              archive_format: 'zip',
            });
            const path = `${process.env.GITHUB_WORKSPACE}/artifact.zip`;
            fs.writeFileSync(path, Buffer.from(download.data));
            console.log(`Artifact downloaded to ${path}`);

      - name: Unzip artifact
        run: unzip artifact.zip
      
      - name: Validate tag
        id: tag-setter
        run: |
              TAG=$(cat env_var.txt)
              if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Tag $TAG is valid."
              echo "TAG=$TAG" >> $GITHUB_OUTPUT
              else
              echo "Tag $TAG is not a valid semantic version. Aborting."
              exit 1
              fi

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-1-dev libdbus-glib-1-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install meson
          python -m pip install dbus-python
          pip install -r requirements.txt

      - name: Download 32-bit base image
        id: download-32bit
        run: |
          wget https://github.com/crs-k/pwnagotchi/releases/download/${{ steps.tag-setter.outputs.TAG }}/pwnagotchi-rpi-bullseye-${{ steps.tag-setter.outputs.TAG }}-armhf.img.xz 
          RESULT=$(find . -name "pwnagotchi-rpi-bullseye-${{ steps.tag-setter.outputs.TAG }}-armhf.img.xz ")
          echo "out32bit=$RESULT" >> $GITHUB_OUTPUT

      - name: Download and unzip 64-bit base image
        id: download-64bit
        run: |
          wget https://github.com/crs-k/pwnagotchi/releases/download/${{ steps.tag-setter.outputs.TAG }}/pwnagotchi-rpi-bullseye-${{ steps.tag-setter.outputs.TAG }}-arm64.img.xz
          RESULT2=$(find . -name "pwnagotchi-rpi-bullseye-${{ steps.tag-setter.outputs.TAG }}-arm64.img.xz ")
          echo "out64bit=$RESULT2" >> $GITHUB_OUTPUT

      - name: Test armv6l - Raspberry Pi Zero W 
        uses: pguyot/arm-runner-action@v2.5.2
        with:
          base_image: file://${{ steps.download-32bit.outputs.out32bit }}
          commands: |
            echo "ARM TEST - Raspberry Pi Zero W"
            test `uname -m` = 'armv6l'

      - name: Test 64-bit - Raspberry Pi 02w, 3 and 4
        uses: pguyot/arm-runner-action@v2.5.2
        with:
          base_image: file://${{ steps.download-64bit.outputs.out64bit }}
          commands: |
              echo "ARM TEST - Raspberry Pi 02w, 3 and 4"
              test `uname -m` = 'aarch64'